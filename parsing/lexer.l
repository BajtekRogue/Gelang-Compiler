%{
#include <stdio.h>
#include <string.h>
#include "parser.tab.h"  // This will be generated by Bison later

int line_num = 1;
%}

%option noyywrap
%option yylineno

/* Definitions */
DIGIT       [0-9]
IDENTIFIER  [_a-z]+

%%
 /* Keywords */
"PROGRAM"       { return PROGRAM; }
"IS"            { return IS; }
"BEGIN"         { return BEGIN_BLOCK; }
"END"           { return END; }
"IF"            { return IF; }
"THEN"          { return THEN; }
"ELSE"          { return ELSE; }
"ENDIF"         { return ENDIF; }
"WHILE"         { return WHILE; }
"DO"            { return DO; }
"ENDWHILE"      { return ENDWHILE; }
"REPEAT"        { return REPEAT; }
"UNTIL"         { return UNTIL; }
"FOR"           { return FOR; }
"FROM"          { return FROM; }
"TO"            { return TO; }
"DOWNTO"        { return DOWNTO; }
"PROCEDURE"     { return PROCEDURE; }
"READ"          { return READ; }
"WRITE"         { return WRITE; }
"T"             { return T; }

 /* Operators */
":="            { return ASSIGN; }
"+"             { return PLUS; }
"-"             { return MINUS; }
"*"             { return MULTIPLY; }
"/"             { return DIVIDE; }
"%"             { return MODULO; }

 /* Comparison Operators */
"="             { return EQ; }
"!="            { return NE; }
"<"             { return LT; }
">"             { return GT; }
"<="            { return LE; }
">="            { return GE; }

 /* Punctuation */
";"             { return SEMICOLON; }
":"             { return COLON; }
","             { return COMMA; }
"("             { return LPAREN; }
")"             { return RPAREN; }
"["             { return LBRACKET; }
"]"             { return RBRACKET; }

 /* Identifiers and Numbers */
{IDENTIFIER}    { 
    yylval.str_val = strdup(yytext); 
    return IDENTIFIER; 
}

[-]?{DIGIT}+        { 
    yylval.int_val = atoi(yytext); 
    return NUMBER; 
}

 /* Comments */
"#".*           { /* Ignore comments */ }

 /* Whitespace */
[ \t]+          { /* Ignore whitespace */ }
\n              { line_num++; }

 /* Error handling for unrecognized tokens */
.               { 
    fprintf(stderr, "Lexical error: Unexpected character '%s' at line %d\n", yytext, line_num); 
    return ERROR; 
}

%%

// /* Optional error handling function */
// void yyerror(const char *s) {
//     fprintf(stderr, "Error: %s at line %d\n", s, line_num);
// }